* Exercises from Essential Lisp, not done in Lisp!

Essential Lisp (Anderson, Corbett, and Reiser) is a Common Lisp based text teaches Lisp by doing. The exercises are small, focused, and are suitable for anyone familiar with general programming concepts.

_Essential Lisp_, Copyright (c) 1987 Addison-Wesley Publishing Company. This is a 1987 paperback edition noted as "published with corrections" on the title page.

** Motivation

I've used the text to provide some structure as I learn Scheme. The way I like to learn something new is to use it to do something I already know: simple programs to demonstrate language usage to solve straight forward tasks.

** Scheme is a Lisp, or is it?

The differences between Lisp and Scheme show up early but can be handled easily. The single biggest stumbling point in the early going was Lisp's "nil punning". Most of the usage is the same but the text often specifies nil for a return value when false (#f) would do.

Here are some of the mechanical or textual replacements to help as you through the text.

- Predicates in Lisp normally end with "p", as in "listp", while in Scheme a "?" is used, as in "list?"
- In place of (defun func (args) ...) use (define (func args) ...) or (define func (lambda (args) ...)).
- In place of (setq var value) or (set 'var value) use (define var value) to create and initialize a variable. The define form can be used again to modify the value but using (set! var value) is proper.
- Some functions dont' exist in Scheme or have different names. There are some helpers and synonyms in scheming.scm.
  - Scheme does not have a nil symbol.
  - Scheme does not have a last function.
  - Scheme does not have an atom predicate, atomp in Lisp, atom? in Scheme.

** Environment

Lisp and Scheme come in many accents. This work was done using GNU Guile 3.0 on Lubuntu 22 with Emacs 28 and Geiser.

** Structure of Files

These files exercises, helpers, and notes all combined. Rather than using org-babel or a more formal literate programming structure, notes and instructions are in the form of Lisp comments using the double semicolon form. Files read from top to bottom and definitions/solutions are often followed by simple tests. With Geiser running, the definitions and tests can be evaluated and any output captured and pasted as verification of the solution.

Notes sometimes ramble as I describe learnings or changes in approach.

** File Naming

Each chapters problems and solutions are in files named ch99-probs.scm. Larger or optional work is still tied to a chapter, as in ch05-tictac.scm.

File scheming.scm contains common definitions and Scheme notes accumulated while working through the text. This file is generally copied at the head of each work file.

** Licensing

There's nothing original here. Just mid level homework. The text provides an answer key already.

Troy Brumley, February 2023.
